# This file is used to configure your project.
# Read more about the various options under:
# https://setuptools.pypa.io/en/latest/userguide/declarative_config.html
# https://setuptools.pypa.io/en/latest/references/keywords.html

[metadata]
name = uniovi-simur-wearablepermed-utils
description = Uniovi Simur WearablePerMed Utils
author = 'Miguel Angel Salinas Gancedo, Alejandro Castellanos Alonso, Antonio Miguel LÃ³pez Rodriguez'
author_email = 'uo34525@uniovi.es, uo265351@uniovi.es, amlopez@uniovi.es'
license = MIT
license_files = LICENSE.txt
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8; variant=GFM
url = https://github.com/pyscaffold/pyscaffold/
# Add here related links, for example:
project_urls =
    Documentation = https://github.com/SiMuR-UO/uniovi-simur-wearablepermed-utils
    Source = https://github.com/SiMuR-UO/uniovi-simur-wearablepermed-utils
#    Changelog = https://pyscaffold.org/en/latest/changelog.html
#    Tracker = https://github.com/pyscaffold/pyscaffold/issues
#    Conda-Forge = https://anaconda.org/conda-forge/pyscaffold
#    Download = https://pypi.org/project/PyScaffold/#files
#    Twitter = https://twitter.com/PyScaffold

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.org/classifiers/
classifiers =
    Development Status :: 4 - Beta
    Programming Language :: Python

version = 1.19.0

[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Require a min/specific Python version (comma-separated conditions)
# python_requires = >=3.8

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    build==1.3.0
    cachetools==6.2.0
    chardet==5.2.0
    colorama==0.4.6
    contourpy==1.3.3
    cycler==0.12.1
    distlib==0.4.0
    et_xmlfile==2.0.0
    filelock==3.19.1
    fonttools==4.60.0
    kiwisolver==1.4.9
    matplotlib==3.10.6
    numpy==2.3.3
    openpyxl==3.1.5
    packaging==25.0
    pandas==2.3.2
    patsy==1.0.1
    pillow==11.3.0
    platformdirs==4.4.0
    pluggy==1.6.0
    pyparsing==3.2.4
    pyproject-api==1.9.1
    pyproject_hooks==1.2.0
    python-dateutil==2.9.0.post0
    pytz==2025.2
    scipy==1.16.2
    setuptools==80.9.0
    setuptools-scm==9.2.0
    six==1.17.0
    statsmodels==0.14.5
    tox==4.30.2
    tzdata==2025.2
    virtualenv==20.34.0
    wheel==0.45.1    


[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install uniovi-simur-wearablepermed-utils[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = wearablepermed_utils.module:function
# For example:
console_scripts =
    #fibonacci = wearablepermed_utils.skeleton:run

    # clean participants folders: npz and image subfolder
    clean_dataset_folder = wearablepermed_utils.clean_dataset_folder:run

    # convert bin to csv IMU files
    sensor_bin_to_csv = wearablepermed_utils.sensor_bin_to_csv:run
    
    # segmentation all participant segment body sensor data
    csv_to_segmented_activity = wearablepermed_utils.csv_to_segmented_activity:run

    # windows all participant segmentation segmented bodies for convolution models
    segmented_activity_to_stack = wearablepermed_utils.segmented_activity_to_stack:run

    # extract feartures from participant windows for randomforest models
    stack_to_features = wearablepermed_utils.stack_to_features:run

    # partial aggregation all participant segment body windows(wrist, hip and thigh) for convolution and random forest models
    aggregate_windows_features = wearablepermed_utils.aggregate_windows_features:run
    
    # model aggregation for all participant datasets to be train
    model_aggregation = wearablepermed_utils.model_aggregation:run

    # plot a IMU csv file
    plot = wearablepermed_utils.plot:run      

# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this pytest issue.
addopts =
    --cov wearablepermed_utils --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 88
extend_ignore = E203, W503
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.6
package = wearablepermed_utils
extensions =
    markdown
